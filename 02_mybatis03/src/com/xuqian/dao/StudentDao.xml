<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.xuqian.dao.StudentDao">

    <select id="getById" parameterType="java.lang.String" resultType="com.xuqian.domain.Student">
        select * from t_student where id=#{id}
    </select>

    <insert id="save">
        insert into t_student(id,name,age) values (#{id},#{name},#{age})
    </insert>

    <select id="getAll" resultType="Student">
        select * from t_student
    </select>

    <!--
        对于parameterType：
            java.lang.String 好使
            String 好使
            parameterType="java.lang.String"省略不写好使
    -->
    <select id="select1"  resultType="Student">
        select * from t_student where id=#{id}
    </select>

    <select id="select2" resultType="Student">
        select * from t_student where age=#{age}
    </select>

    <!--<select id="select3" parameterType="" resultType="Student">
        select * from t_student where name=#{name} and age=#{age}
    </select>-->

    <select id="select4" parameterType="Student" resultType="Student">
        select * from t_student where name=#{name} and age=#{age}
    </select>

    <select id="select5" parameterType="Map" resultType="Student">
        select * from t_student where name=#{name} and age=#{age}
    </select>

    <select id="select7" resultType="student">
        select * from t_student where name like '%' #{name} '%'
    </select>

    <select id="select8" resultType="String">
        select name from t_student where id=#{id}
    </select>

    <select id="select9" resultType="String">
        select name from t_student
    </select>

    <select id="select10" resultType="Integer">
        select count(*) from t_student
    </select>

    <select id="select11" resultType="Map">
        select name,age from t_student
    </select>

    <select id="select12" resultType="Student">
        select id,fullname as name,age from t_student;
    </select>

    <!--
        id:resultMap标签的唯一标识
           将来在使用到该resultMap标签的时候，使用id来找到这组标签

        type：指定一个类型，与数据库表一一对应，建立起字段和类属性的名字一一匹配的关系
    -->
    <resultMap id="stuMap" type="Student">

        <!--
            id标签：用来配置主键的对应关系的
            result标签：用来配置普通字段对应关系的

            对于t_student表，表结果时一个id，两个普通字段
            所以我们需要一个id标签，两个result标签

            property属性：配置的是类中的属性名
            column属性：配置的是表中的字段名

            这样就能够建立起类属性和表字段一一对应的关系了
        -->
        <id property="id" column="id" />
        <result property="name" column="fullname" />
        <result property="age" column="age" />
    </resultMap>

    <select id="select13" resultMap="stuMap">
        select * from t_student
    </select>

    <select id="select14" resultType="Student">
        select * from t_student

        <!--
            where标签：
                当where标签在使用的时候必须搭配where标签对中的if标签来使用，
                通过if标签的判断，如果有查询条件，则展现where关键字，如果没有查询条件则不展现where关键字

                where标签会自动的屏蔽掉第一个连接符and/or
          -->

        <where>

            <if test="name!=null and name!=''">

                and name like '%' #{name} '%'

            </if>

            <if test="address!=null and address!=''">

                and address like '%' #{address} '%'

            </if>
        </where>
    </select>

    <select id="select15" resultType="Student">

        select * from t_student

        where id in

        <!--
            foreach标签：用来遍历传递来的数组参数

            collection：标签传递参数的类型
                        array：数组
                        list：集合

            item：每一次遍历出来的元素，在使用该元素的时候，需要套用在#{}中

            open：拼接循环开始的符号
            close：拼接循环的结束符号
            separator：元素与元素之间的分隔符
        -->

        <foreach collection="array" item="id"  open="(" close=")"  separator="," >
            #{id}
        </foreach>

    </select>

</mapper>

